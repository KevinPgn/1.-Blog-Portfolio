datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          String          @default("contributor") //contributor, approved-contributor, admin
  bio           String?
  reputationScore Int    @default(0)
  badges          UserBadge[]

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}


model Post {
  id        String @id @default(cuid())
  title     String
  slug      String @unique
  description String?
  content   String?
  imageUrl     String?
  category    String?
  views       Int    @default(0)
  minRead     Int    @default(0)

  published Boolean @default(false)

  comments    Comment[]

  authorId  String
  author    User   @relation(fields: [authorId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([slug])
}

model Comment {
  id        String @id @default(cuid())
  content   String
  postId    String
  post      Post   @relation(fields: [postId], references: [id])

  authorId  String
  author    User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

// Badge et reputation system
model Badge {
  id          String @id @default(cuid())
  name        String @unique
  icon        String
  users       UserBadge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserBadge {
  id        String @id @default(cuid())
  
  userId    String
  badgeId   String

  user      User   @relation(fields: [userId], references: [id])
  badge     Badge  @relation(fields: [badgeId], references: [id])
  
  awardedAt DateTime @default(now())

  @@unique([userId, badgeId])
}